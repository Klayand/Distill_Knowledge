import matplotlib.pyplot as plt
import numpy as np
import json
import os


def plot_image():
    # Assuming x values represent some metric on the x-axis
    x = [i for i in range(1, 241)]

    # Generating random y values for demonstration purposes
    # In practice, these would be your actual data points

    y1 = [
        0.34181000701606734,
        0.43186947177438173,
        0.474843791043362,
        0.5089875579490076,
        0.5454006601782406,
        0.5709222203325433,
        0.5933210584513672,
        0.609089095391276,
        0.6202492496241694,
        0.6297528928503051,
        0.6423491593212118,
        0.6487735386699667,
        0.6558911490623298,
        0.661870878614733,
        0.6674188293154587,
        0.6722706363634076,
        0.6787537860748408,
        0.6817124409443888,
        0.684371337439398,
        0.6901963440048725,
        0.6942210884045457,
        0.6959522207069885,
        0.6986484384292837,
        0.7004537813498846,
        0.7045311415591813,
        0.7056045724912677,
        0.7072912475946919,
        0.7094953507718528,
        0.7105830633426871,
        0.7111880498773911,
        0.7139473240698695,
        0.7143548000194228,
        0.715867303033619,
        0.7169859744093913,
        0.7181939712875639,
        0.7186942471262744,
        0.721167940495874,
        0.7209367621585232,
        0.7218456539656499,
        0.7233732740592469,
        0.7245583285456119,
        0.7249744971999732,
        0.7248709318887852,
        0.7266885067190965,
        0.7273776179384392,
        0.7292851802333237,
        0.7297702136856821,
        0.7289169297498815,
        0.7303311308326623,
        0.7306024205654174,
        0.7317678744225856,
        0.7310677510698128,
        0.7322958913910419,
        0.7337999897539768,
        0.7332408735514296,
        0.7348025700625251,
        0.7341548825773742,
        0.7347818324632962,
        0.7346220490877585,
        0.7358274651915215,
        0.7378498749354916,
        0.7378904920709712,
        0.7368201310677296,
        0.7384259054422988,
        0.7388190509108326,
        0.738668089632488,
        0.738115019993404,
        0.7385397697043846,
        0.7393776900323151,
        0.7401998779657857,
        0.7405728582226102,
        0.7389076871945119,
        0.7408766386758946,
        0.7409888446788349,
        0.741654704354913,
        0.7422087628518225,
        0.7420725224268101,
        0.7419673548330127,
        0.7424248634396917,
        0.7409998322996642,
        0.7422003399075755,
        0.7421725817043763,
        0.7421468809742452,
        0.7417005274911671,
        0.7431894943232427,
        0.7429485457632548,
        0.7440198607456958,
        0.7431812651017132,
        0.74472160077156,
        0.7435299302610899,
        0.7451325496444312,
        0.7448871650354332,
        0.7453689239214143,
        0.7452755419494551,
        0.7446523810896422,
        0.7458770843418053,
        0.745794649746107,
        0.7458411075270084,
        0.7455312247166548,
        0.746501779129438,
        0.7474490016317733,
        0.746764364327921,
        0.7460857390747655,
        0.7468662936364294,
        0.7471857208120244,
        0.747100349521393,
        0.745543267172011,
        0.7481512114215081,
        0.7457231916734934,
        0.7481049807785112,
        0.7475310085984448,
        0.7482860927386662,
        0.7483897846373145,
        0.747679315320671,
        0.7491104178416454,
        0.7481619922096467,
        0.748432283694177,
        0.7498337105412007,
        0.7487294609894228,
        0.7498810948008466,
        0.7488110255707255,
        0.7484211155215797,
        0.7480062111564305,
        0.7484184351113752,
        0.7485197105066246,
        0.7495938873656876,
        0.7489416578541631,
        0.749706913077313,
        0.7495879509259977,
        0.7489722217745183,
        0.7497893875517199,
        0.750227358396096,
        0.749859062789956,
        0.7492283456465778,
        0.7502733053758626,
        0.7503187988115394,
        0.7512994290617725,
        0.7509790591876525,
        0.7503317212814565,
        0.750339808793324,
        0.7505036866268538,
        0.7502065205513059,
        0.7508830046104957,
        0.7499356878383081,
        0.750406220989764,
        0.7507295314003439,
        0.7494005954479013,
        0.750679129529792,
        0.7512635194432095,
        0.7510280053633863,
        0.7749919680378321,
        0.783308684612479,
        0.7867499317354558,
        0.7884195070437459,
        0.7898017019262095,
        0.7902058859920258,
        0.7913245605385822,
        0.7915358064119773,
        0.7926730032772055,
        0.7931600702388207,
        0.7927829363766838,
        0.7942296743392945,
        0.7938162499376575,
        0.7945750929205618,
        0.7947466045389395,
        0.795616458505011,
        0.7952353486624519,
        0.7956106831655478,
        0.7967079947366739,
        0.7968250911863868,
        0.795700735692173,
        0.7969405780362961,
        0.7967113987564126,
        0.7964867325999853,
        0.7975787807303621,
        0.7992150288408675,
        0.8015798493114579,
        0.8011179250219594,
        0.8005242200763634,
        0.8010353505458978,
        0.8016984246880806,
        0.8016755625415032,
        0.8019518234540739,
        0.801477582497365,
        0.8020793636741541,
        0.8018599724220803,
        0.8014557107330283,
        0.8026318725112759,
        0.8021994284656652,
        0.8017703221582085,
        0.8010497756016528,
        0.8010121082710793,
        0.8020934577488228,
        0.8027862515290984,
        0.8017818313730343,
        0.8028647114248837,
        0.8024751764429195,
        0.8030064012083556,
        0.8016240841897246,
        0.8029298379902949,
        0.8037875207793682,
        0.8032720414573884,
        0.8032179515380079,
        0.803392271373583,
        0.8022938831992772,
        0.8026498798214261,
        0.8020842256448457,
        0.8028912275953367,
        0.8007827552078325,
        0.802032227955206,
        0.8030048465484854,
        0.8028146212058299,
        0.8030555763512925,
        0.80215752618697,
        0.8035093309324417,
        0.8035102955825494,
        0.8025652936047605,
        0.8040170762849892,
        0.8032680039515581,
        0.8023975776589435,
        0.803037865753369,
        0.8026507947146131,
        0.8030116265996948,
        0.803341024184166,
        0.8038754422951232,
        0.8033372193651125,
        0.8021655691249292,
        0.8030560951403645,
        0.8027094900150737,
        0.8025783302838845,
        0.8039415686331747,
        0.8017508477506124,
        0.8025863743803996,
        0.8023391998637364,
        0.8020761514868578,
        0.8029703156722476,
        0.8020836227080401,
        0.8031620389055414,
        0.8020064503945352,
        0.8023803865208345
    ]

    # y2 = [0.226, 0.277, 0.311, 0.321, 0.327, 0.339, 0.346, 0.351, 0.35, 0.354, 0.355, 0.365, 0.366, 0.366,
                   # 0.363, 0.367, 0.4, 0.4, 0.402, 0.4, 0.402, 0.4, 0.402, 0.402]
    # y3 = [0.206, 0.283, 0.306, 0.326, 0.324, 0.34, 0.347, 0.349, 0.353, 0.357, 0.356, 0.357, 0.365, 0.364,
                   #0.362, 0.364, 0.397, 0.4, 0.4, 0.4, 0.402, 0.402, 0.403, 0.403]

    # Plotting the lines
    plt.plot(x, y1, label='VGG13(T)-MobileNetV2(S)', color='grey')
    # plt.plot(x, y2, label='layer 2')
    # plt.plot(x, y3, label='layer 3')
    # plt.plot(x, y4, label='batch_size 4x4')

    # Adding fill between the lines and the x-axis to create the shaded error margin
    # plt.fill_between(x, y1)
    # plt.fill_between(x, y2, alpha=0.1)
    # plt.fill_between(x, y3, alpha=0.1)
    # plt.fill_between(x, y4, alpha=0.1)

    # Adding labels and legend
    # plt.xticks(np.arange(1, 25, 2))
    plt.ylim((0.300, 0.900))
    plt.grid(ls='--')
    plt.xlabel('Iterations')
    plt.ylabel('COCO minibatch CKA Value')
    # plt.title('Comparison of Different Batch Sizes')
    plt.legend()

    # Show the plot
    # plt.show()
    plt.savefig('pic/VGG13(T)-MobileNetV2(S).png')


def get_mmap():
    file_name_list = os.listdir('runs/')

    for file_name in file_name_list:
        with open(f'runs/{file_name}', 'r') as f:
            file = f.read().strip().split('\n')

        mmap_list = []
        for column in file:
            if 'lr' not in column:
                mmap_list.append(eval(column))

        values = []
        for dict in mmap_list:
            values.append(dict['coco/bbox_mAP'])
        print(file_name, values)


def dict2json(file_name, the_dict):
    '''
    将字典文件写如到json文件中
    :param file_name: 要写入的json文件名(需要有.json后缀),str类型
    :param the_dict: 要写入的数据，dict类型
    :return: 1代表写入成功,0代表写入失败
    '''
    try:
        json_str = json.dumps(the_dict, indent=4, ensure_ascii=False)
        with open(file_name, 'w') as json_file:
            json_file.write(json_str)
        return 1
    except:
        return 0


def get_patches(file_name, patch_size):
    import cv2
    import numpy as np

    # 读取图片
    image = cv2.imread(file_name)
    image = cv2.resize(image, (480, 480))

    # 定义patch的大小
    patch_size = patch_size

    # 切成patch
    patches = []
    for i in range(0, image.shape[0], patch_size):
        for j in range(0, image.shape[1], patch_size):
            patch = image[i:i + patch_size, j:j + patch_size]
            patches.append(patch)

    # 可视化patch
    for i in range(len(patches)):
        cv2.imwrite(f'4_{i + 1}.png', patches[i])



plot_image()